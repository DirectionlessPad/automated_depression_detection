"""Functions for loading OpenFace generated features."""
from pathlib import Path
from typing import Dict
import pandas as pd


# These two function can almost certainly be made into one by either importing both together
# into a single objector by creating a single (more generic) function that can handle both.


def load_openface_features(features_path: Path) -> Dict[str, pd.DataFrame]:
    """Loads the .csv files of OpenFace features as DataFrame objects.

    Iterates over the directory containing data samples. The features
    from each sample are loaded into a dictionary of dataframes.

    Dictionary keys are the names of samples.
    """
    if not Path.exists(features_path):
        print("Directory does not exist. Check input feature directory.")
    path_generator = features_path.rglob("*.csv")
    samples = {}
    for path in path_generator:
        str_path = str(path)
        # The following may or may not work depending on the naming conventions of the samples.
        start = str_path.rindex("\\")
        end = str_path.rindex(".")
        sample = str_path[start + 1 : end]
        # Read the csv file and store as dataframe.
        sample_df = pd.read_csv(path)
        sample_df.columns = sample_df.columns.str.replace(" ", "")
        samples[sample] = sample_df
    if not samples:
        print(
            "No samples loaded, check the samples are available in the input directory."
        )
    return samples


def load_openface_hog(features_path: Path) -> Dict[str, pd.DataFrame]:
    """Loads the .csv files of HOG features generated by OpenFace.

    Iterates over the directory containing data samples. The features
    from each sample are loaded into a dictionary of dataframes.

    Dictionary keys are the names of samples.
    """
    if not Path.exists(features_path):
        print("Directory does not exist. Check input feature directory.")
    path_generator = features_path.rglob("*.csv")
    samples = {}
    for path in path_generator:
        str_path = str(path)
        # The following may or may not work depending on the naming conventions of the samples.
        start = str_path.rindex("\\")
        end = str_path.rindex("H")
        sample = str_path[start + 1 : end]
        # Read the csv file and store as dataframe.
        sample_df = pd.read_csv(path, header=None)
        samples[sample] = sample_df
    if not samples:
        print(
            "No samples loaded, check the samples are available in the input directory."
        )
    return samples
